name: Build and Release

on:
  workflow_dispatch: {}
  push:
    tags:
      - 'v*'   # e.g. v1.0.9

# ðŸ‘‡ ensures GITHUB_TOKEN can create releases
permissions:
  contents: write

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-14]

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js (LTS)
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install system deps (Linux only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y rpm fakeroot dpkg rpm2cpio cpio
          # If you also build AppImage later, add:
          # sudo apt-get install -y squashfs-tools file

      # Install deps per-OS
      - name: Install deps (macOS)
        if: matrix.os == 'macos-14'
        run: npm ci --no-audit --no-fund

      - name: Install deps (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: npm ci --no-audit --no-fund

      - name: Install deps (Windows)
        if: matrix.os == 'windows-latest'
        run: npm ci --omit=optional --no-audit --no-fund

      # Ensure Windows maker (belt & suspenders)
      - name: Ensure Windows maker present (no-save)
        if: matrix.os == 'windows-latest'
        run: npm i --no-save @electron-forge/maker-squirrel@^7.8.0 --prefer-online --no-audit --no-fund

      - name: Build renderer
        run: npm run build:renderer

      # Build per-OS targets
      - name: Build (Windows EXE)
        if: matrix.os == 'windows-latest'
        env:
          DEBUG: electron-forge:*
          npm_config_loglevel: warn
        run: npx electron-forge make --targets @electron-forge/maker-squirrel

      - name: Build (macOS DMG/ZIP)
        if: matrix.os == 'macos-14'
        env:
          DEBUG: electron-forge:*
          npm_config_loglevel: warn
        run: npx electron-forge make --targets @electron-forge/maker-dmg,@electron-forge/maker-zip

      - name: Build (Linux DEB/RPM)
        if: matrix.os == 'ubuntu-latest'
        env:
          DEBUG: electron-forge:*
          npm_config_loglevel: warn
        run: npx electron-forge make --targets @electron-forge/maker-deb,@electron-forge/maker-rpm

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-build
          path: out/make/

      - name: Upload npm & forge logs (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-logs
          path: |
            ~/.npm/_logs/*
            **/forge-*.log
            **/*.log
          if-no-files-found: ignore

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    # guard: only on your own repo (not forks) and only on tag events
    if: github.event_name != 'pull_request' && github.repository_owner == github.actor

    steps:
      - name: Download macOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-14-build
          path: dist/macos

      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-latest-build
          path: dist/windows

      - name: Download Linux artifacts
        uses: actions/download-artifact@v4
        with:
          name: ubuntu-latest-build
          path: dist/linux

      - name: Create draft release with all files
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          draft: true
          files: dist/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
